/*
 *  The MIT License
 * 
 *  Copyright 2010 Georgios Migdos <cyberpython@gmail.com>.
 * 
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */

/*
 * JRuntimeWindowInputPanel.java
 *
 * Created on Nov 8, 2010, 3:34:54 PM
 */

package glossa.ui.gui.io;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;

/**
 *
 * @author Georgios Migdos <cyberpython@gmail.com>
 */
public class JRuntimeWindowInputPanel extends javax.swing.JPanel {

    /** Creates new form JRuntimeWindowInputPanel */
    private InputStream in;
    private OutputStream out;
    private JRuntimeWindow window;

    public JRuntimeWindowInputPanel() {
        initComponents();
        this.in = System.in;
        out = new PipedOutputStream();
        try{
            in = new PipedInputStream((PipedOutputStream)out);
        }catch(IOException ioe){
            System.err.println(ioe.getLocalizedMessage());
        }
    }

    public void setSubmitButtonText(String text){
        this.jButton1.setText(text);
    }

    public void setTextFieldNotFocusedText(String text){
        this.jTypeHereTextField1.setTextWhenNotFocused(text);
    }

    public JRuntimeWindow getWindow() {
        return window;
    }

    public void setWindow(JRuntimeWindow window) {
        this.window = window;
    }

    private void submit(){
        BufferedWriter w = new BufferedWriter(new OutputStreamWriter(out));
        String text = jTypeHereTextField1.getText();
        try{
            if(window!=null){
                window.append(text, false);
                window.newline();
            }
            w.write(text);
            w.newLine();
            w.flush();
        }catch(IOException ioe){
            System.err.println(ioe.getLocalizedMessage());
        }
        jTypeHereTextField1.setText("");
    }

    public InputStream getInputStream(){
        return this.in;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTypeHereTextField1 = new glossa.ui.gui.io.JTypeHereTextField();

        jButton1.setText("Submit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTypeHereTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTypeHereTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTypeHereTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton1)
                .addComponent(jTypeHereTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTypeHereTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTypeHereTextField1ActionPerformed
        submit();
    }//GEN-LAST:event_jTypeHereTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        submit();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private glossa.ui.gui.io.JTypeHereTextField jTypeHereTextField1;
    // End of variables declaration//GEN-END:variables

}
